

ddLCMThread::ddLCMThread();
ddLCMThread::ddLCMThread(QObject*);
ddLCMThread::~ddLCMThread();
void ddLCMThread::stop();
void ddLCMThread::addSubscriber(ddLCMSubscriber*);
void ddLCMThread::removeSubscriber(ddLCMSubscriber*);

ddLCMSubscriber::ddLCMSubscriber(const QString&);
ddLCMSubscriber::ddLCMSubscriber(const QString&, QObject*);
QByteArray ddLCMSubscriber::getNextMessage(int) const;
void ddLCMSubscriber::setCallbackEnabled(bool);
bool ddLCMSubscriber::callbackIsEnabled() const;
void ddLCMSubscriber::setSpeedLimit(double);
QString ddLCMSubscriber::channel() const;
ddLCMSubscriber::~ddLCMSubscriber();

ddBotImageQueue::ddBotImageQueue(QObject*);
ddBotImageQueue::ddBotImageQueue();
ddBotImageQueue::~ddBotImageQueue();
void ddBotImageQueue::init(ddLCMThread*);
void ddBotImageQueue::colorizePoints(const QString&, vtkPolyData*);
void ddBotImageQueue::computeTextureCoords(const QString&, vtkPolyData*);
quint64 ddBotImageQueue::getImage(const QString&, vtkImageData*);
quint64 ddBotImageQueue::getCurrentImageTime(const QString&);
void ddBotImageQueue::getBodyToCameraTransform(const QString&, vtkTransform*);
int ddBotImageQueue::getTransform(const QString&, const QString&, quint64, vtkTransform*);
bool ddBotImageQueue::addCameraStream(const QString&);
QList<double> ddBotImageQueue::getCameraFrustumBounds(const QString&);


ddGroupBoxHider::ddGroupBoxHider(QGroupBox*);
ddGroupBoxHider::~ddGroupBoxHider();

ddDrakeModel::ddDrakeModel();
ddDrakeModel::~ddDrakeModel();
bool ddDrakeModel::loadFromFile(const QString&);
bool ddDrakeModel::loadFromXML(const QString&);
void ddDrakeModel::addToRenderer(vtkRenderer*);
void ddDrakeModel::removeFromRenderer(vtkRenderer*);
int ddDrakeModel::numberOfJoints();
void ddDrakeModel::setJointPositions(const QVector<double>&);
void ddDrakeModel::setJointPositions(const QVector<double>&, const QStringList&);
QVector<double> ddDrakeModel::getJointPositions() const;
bool ddDrakeModel::getLinkToWorld(const QString&, vtkTransform*);
QString ddDrakeModel::getLinkNameForMesh(vtkPolyData*);
QStringList ddDrakeModel::getLinkNames();
QStringList ddDrakeModel::getJointNames();
void ddDrakeModel::setAlpha(double);
void ddDrakeModel::setVisible(bool);
QColor ddDrakeModel::color() const;
void ddDrakeModel::setColor(const QColor&);
void ddDrakeModel::setLinkColor(const QString&, const QColor&);
void ddDrakeModel::getModelMesh(vtkPolyData*);

double ddDrakeModel::alpha() const;
bool ddDrakeModel::visible() const;
QString ddDrakeModel::filename() const;

static void ddDrakeModel::addPackageSearchPath(const QString&);
static QString ddDrakeModel::findPackageDirectory(const QString&);

ddDrakeModel* ddDRCView::loadURDFModel(const QString&);
ddDrakeModel* ddDRCView::loadURDFModelXML(const QString&);
QList<ddDrakeModel*> ddDRCView::models() const;
void ddDRCView::unloadModel(ddDrakeModel*);
void ddDRCView::unloadModels();

ddQVTKWidgetView::ddQVTKWidgetView();
ddQVTKWidgetView::~ddQVTKWidgetView();
vtkCamera* ddQVTKWidgetView::camera() const;
vtkRenderWindow* ddQVTKWidgetView::renderWindow() const;
vtkRenderer* ddQVTKWidgetView::renderer() const;
vtkRenderer* ddQVTKWidgetView::backgroundRenderer() const;
QVTKWidget* ddQVTKWidgetView::vtkWidget() const;
vtkOrientationMarkerWidget* ddQVTKWidgetView::orientationMarkerWidget() const;
QList<double> ddQVTKWidgetView::lastTDxMotion() const;
void ddQVTKWidgetView::installImageInteractor();
void ddQVTKWidgetView::addCustomBounds(const QList<double>&);

ddMainWindow::ddMainWindow();
ddMainWindow::~ddMainWindow();
ddViewManager* ddMainWindow::viewManager()
ddPropertiesPanel* ddMainWindow::propertiesPanel() const;
QToolBar* ddMainWindow::toolBar() const;
QToolBar* ddMainWindow::macrosToolBar() const;
QTreeWidget* ddMainWindow::objectTree() const;
QTextEdit* ddMainWindow::outputConsole() const;
QMenu* ddMainWindow::toolsMenu() const;
void ddMainWindow::addWidgetToViewMenu(QWidget*);
QList<QAction*> ddMainWindow::toolBarActions() const;

ddObjectTree::ddObjectTree();
ddObjectTree::~ddObjectTree();

ddTaskSelection::ddTaskSelection();
ddTaskSelection::~ddTaskSelection();

ddLumberSelection::ddLumberSelection();
ddLumberSelection::~ddLumberSelection();

void ddPythonManager::setupConsole(QWidget*);

ddPythonEventFilter::ddPythonEventFilter();
ddPythonEventFilter::~ddPythonEventFilter();
void ddPythonEventFilter::setEventHandlerResult(bool);
void ddPythonEventFilter::addFilteredEventType(int);
void ddPythonEventFilter::removeFilteredEventType(int);


ddViewBase* ddViewManager::findView(const QString&) const;
ddViewBase* ddViewManager::createView(const QString&, const QString&, int);
ddViewBase* ddViewManager::createView(const QString&, const QString&);
void ddViewManager::switchToView(const QString&);
ddViewBase* ddViewManager::currentView() const;
void ddViewManager::popOut(ddViewBase*);

QAbstractItemModel* ddSpreadsheetView::model();
QStringList ddSpreadsheetView::rowData(int) const;
int ddSpreadsheetView::rowCount() const;
int ddSpreadsheetView::columnCount() const;
void ddSpreadsheetView::appendRow(const QStringList&);
void ddSpreadsheetView::removeRow(int);


QString QtVariantProperty::propertyName();
QVariant QtVariantProperty::value();
void QtVariantProperty::setValue(const QVariant &);
void QtVariantProperty::setAttribute(const QString &, const QVariant &);
bool QtVariantProperty::isSubProperty() const;

ddPropertiesPanel::ddPropertiesPanel();
ddPropertiesPanel::~ddPropertiesPanel();
QtVariantProperty* ddPropertiesPanel::addGroup(const QString&);
QtVariantProperty* ddPropertiesPanel::addProperty(const QString&, const QVariant&);
QtVariantProperty* ddPropertiesPanel::addEnumProperty(const QString&, const QVariant&);
QtVariantProperty* ddPropertiesPanel::addSubProperty(const QString&, const QVariant&, QtVariantProperty*);
QtVariantProperty* ddPropertiesPanel::findProperty(const QString&) const;
QtVariantProperty* ddPropertiesPanel::findSubProperty(const QString&, QtVariantProperty*) const;
void ddPropertiesPanel::setBrowserModeToTree();
void ddPropertiesPanel::setBrowserModeToWidget();


ddSignalMap::ddSignalMap();
QMap<QString, QVariant> ddSignalMap::map() const;
void ddSignalMap::signalItemChanged(const QString&);
void ddSignalMap::setItem(const QString&, const QVariant&);
QVariant ddSignalMap::value(const QString&) const;
