ddBotImageQueue::ddBotImageQueue(QObject*);
ddBotImageQueue::ddBotImageQueue();
ddBotImageQueue::~ddBotImageQueue();
void ddBotImageQueue::init(ddLCMThread*, const QString&);
void ddBotImageQueue::colorizePoints(const QString&, vtkPolyData*);
void ddBotImageQueue::computeTextureCoords(const QString&, vtkPolyData*);
qint64 ddBotImageQueue::getImage(const QString&, vtkImageData*);
qint64 ddBotImageQueue::getCurrentImageTime(const QString&);
void ddBotImageQueue::getCameraProjectionTransform(const QString&, vtkTransform*);
void ddBotImageQueue::getBodyToCameraTransform(const QString&, vtkTransform*);
void ddBotImageQueue::publishRGBImageMessage(const QString&, vtkImageData*, qint64);
void ddBotImageQueue::publishRGBDImagesMessage(const QString&, vtkImageData*, vtkImageData*, qint64);
void ddBotImageQueue::getPointCloudFromImages(const QString&, vtkPolyData*, int, int, float);
int ddBotImageQueue::projectPoints(const QString&, vtkPolyData*);
int ddBotImageQueue::getTransform(const QString&, const QString&, qint64, vtkTransform*);
int ddBotImageQueue::getTransform(const QString&, const QString&, vtkTransform*);
QStringList ddBotImageQueue::getBotFrameNames() const;
QStringList ddBotImageQueue::getCameraNames() const;
bool ddBotImageQueue::addCameraStream(const QString&);
bool ddBotImageQueue::addCameraStream(const QString&, const QString&, int);
QList<double> ddBotImageQueue::getCameraFrustumBounds(const QString&);
QList<double> ddBotImageQueue::unprojectPixel(const QString&, int, int);
void ddBotImageQueue::openLCMFile(const QString&);
bool ddBotImageQueue::readNextImagesMessage();
//ddKinectLCM::ddKinectLCM(QObject*);
//void ddKinectLCM::init(ddLCMThread*, const QString&);
//qint64 ddKinectLCM::getPointCloudFromKinect(vtkPolyData*)
ddPointCloudLCM::ddPointCloudLCM(QObject*);
void ddPointCloudLCM::init(ddLCMThread*, const QString&);
qint64 ddPointCloudLCM::getPointCloudFromPointCloud(vtkPolyData*);
QStringList ddPointCloudLCM::getLidarNames() const;
QString ddPointCloudLCM::getLidarFriendlyName(const QString&);
QString ddPointCloudLCM::getLidarChannelName(const QString&);
QString ddPointCloudLCM::getLidarCoordinateFrame(const QString&);
int ddPointCloudLCM::getLidarFrequency(const QString&);
bool ddPointCloudLCM::displayLidar(const QString&);
QList<int> ddPointCloudLCM::getLidarIntensity(const QString&);
